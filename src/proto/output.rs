// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `output.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.TextureId)
pub struct TextureId {
    // message fields
    // @@protoc_insertion_point(field:proto.TextureId.tag)
    pub tag: u32,
    // @@protoc_insertion_point(field:proto.TextureId.managed)
    pub managed: u64,
    // @@protoc_insertion_point(field:proto.TextureId.user)
    pub user: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proto.TextureId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TextureId {
    fn default() -> &'a TextureId {
        <TextureId as ::protobuf::Message>::default_instance()
    }
}

impl TextureId {
    pub fn new() -> TextureId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &TextureId| { &m.tag },
            |m: &mut TextureId| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "managed",
            |m: &TextureId| { &m.managed },
            |m: &mut TextureId| { &mut m.managed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user",
            |m: &TextureId| { &m.user },
            |m: &mut TextureId| { &mut m.user },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TextureId>(
            "TextureId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TextureId {
    const NAME: &'static str = "TextureId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.tag = is.read_uint32()?;
                },
                16 => {
                    self.managed = is.read_uint64()?;
                },
                24 => {
                    self.user = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.tag != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.tag);
        }
        if self.managed != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.managed);
        }
        if self.user != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.user);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.tag != 0 {
            os.write_uint32(1, self.tag)?;
        }
        if self.managed != 0 {
            os.write_uint64(2, self.managed)?;
        }
        if self.user != 0 {
            os.write_uint64(3, self.user)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TextureId {
        TextureId::new()
    }

    fn clear(&mut self) {
        self.tag = 0;
        self.managed = 0;
        self.user = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TextureId {
        static instance: TextureId = TextureId {
            tag: 0,
            managed: 0,
            user: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TextureId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TextureId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TextureId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TextureId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Mesh)
pub struct Mesh {
    // message fields
    // @@protoc_insertion_point(field:proto.Mesh.texture_id)
    pub texture_id: ::protobuf::MessageField<TextureId>,
    // @@protoc_insertion_point(field:proto.Mesh.indices)
    pub indices: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proto.Mesh.index_count)
    pub index_count: u32,
    // @@protoc_insertion_point(field:proto.Mesh.vertices)
    pub vertices: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:proto.Mesh.vertex_count)
    pub vertex_count: u32,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Mesh.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Mesh {
    fn default() -> &'a Mesh {
        <Mesh as ::protobuf::Message>::default_instance()
    }
}

impl Mesh {
    pub fn new() -> Mesh {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TextureId>(
            "texture_id",
            |m: &Mesh| { &m.texture_id },
            |m: &mut Mesh| { &mut m.texture_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "indices",
            |m: &Mesh| { &m.indices },
            |m: &mut Mesh| { &mut m.indices },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index_count",
            |m: &Mesh| { &m.index_count },
            |m: &mut Mesh| { &mut m.index_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertices",
            |m: &Mesh| { &m.vertices },
            |m: &mut Mesh| { &mut m.vertices },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertex_count",
            |m: &Mesh| { &m.vertex_count },
            |m: &mut Mesh| { &mut m.vertex_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Mesh>(
            "Mesh",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Mesh {
    const NAME: &'static str = "Mesh";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.texture_id)?;
                },
                18 => {
                    self.indices = is.read_bytes()?;
                },
                24 => {
                    self.index_count = is.read_uint32()?;
                },
                34 => {
                    self.vertices = is.read_bytes()?;
                },
                40 => {
                    self.vertex_count = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.texture_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.indices.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.indices);
        }
        if self.index_count != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.index_count);
        }
        if !self.vertices.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.vertices);
        }
        if self.vertex_count != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.vertex_count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.texture_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.indices.is_empty() {
            os.write_bytes(2, &self.indices)?;
        }
        if self.index_count != 0 {
            os.write_uint32(3, self.index_count)?;
        }
        if !self.vertices.is_empty() {
            os.write_bytes(4, &self.vertices)?;
        }
        if self.vertex_count != 0 {
            os.write_uint32(5, self.vertex_count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Mesh {
        Mesh::new()
    }

    fn clear(&mut self) {
        self.texture_id.clear();
        self.indices.clear();
        self.index_count = 0;
        self.vertices.clear();
        self.vertex_count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Mesh {
        static instance: Mesh = Mesh {
            texture_id: ::protobuf::MessageField::none(),
            indices: ::std::vec::Vec::new(),
            index_count: 0,
            vertices: ::std::vec::Vec::new(),
            vertex_count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Mesh {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Mesh").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Mesh {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mesh {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ClippedPrimitive)
pub struct ClippedPrimitive {
    // message fields
    // @@protoc_insertion_point(field:proto.ClippedPrimitive.clip_rect)
    pub clip_rect: ::protobuf::MessageField<super::common::Rect>,
    // @@protoc_insertion_point(field:proto.ClippedPrimitive.tag)
    pub tag: u32,
    // @@protoc_insertion_point(field:proto.ClippedPrimitive.mesh)
    pub mesh: ::protobuf::MessageField<Mesh>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ClippedPrimitive.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClippedPrimitive {
    fn default() -> &'a ClippedPrimitive {
        <ClippedPrimitive as ::protobuf::Message>::default_instance()
    }
}

impl ClippedPrimitive {
    pub fn new() -> ClippedPrimitive {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Rect>(
            "clip_rect",
            |m: &ClippedPrimitive| { &m.clip_rect },
            |m: &mut ClippedPrimitive| { &mut m.clip_rect },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &ClippedPrimitive| { &m.tag },
            |m: &mut ClippedPrimitive| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Mesh>(
            "mesh",
            |m: &ClippedPrimitive| { &m.mesh },
            |m: &mut ClippedPrimitive| { &mut m.mesh },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClippedPrimitive>(
            "ClippedPrimitive",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClippedPrimitive {
    const NAME: &'static str = "ClippedPrimitive";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.clip_rect)?;
                },
                16 => {
                    self.tag = is.read_uint32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mesh)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip_rect.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.tag != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.tag);
        }
        if let Some(v) = self.mesh.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.clip_rect.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.tag != 0 {
            os.write_uint32(2, self.tag)?;
        }
        if let Some(v) = self.mesh.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClippedPrimitive {
        ClippedPrimitive::new()
    }

    fn clear(&mut self) {
        self.clip_rect.clear();
        self.tag = 0;
        self.mesh.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClippedPrimitive {
        static instance: ClippedPrimitive = ClippedPrimitive {
            clip_rect: ::protobuf::MessageField::none(),
            tag: 0,
            mesh: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClippedPrimitive {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClippedPrimitive").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClippedPrimitive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClippedPrimitive {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Image)
pub struct Image {
    // message fields
    // @@protoc_insertion_point(field:proto.Image.width)
    pub width: u32,
    // @@protoc_insertion_point(field:proto.Image.height)
    pub height: u32,
    // @@protoc_insertion_point(field:proto.Image.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Image.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Image {
    fn default() -> &'a Image {
        <Image as ::protobuf::Message>::default_instance()
    }
}

impl Image {
    pub fn new() -> Image {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &Image| { &m.width },
            |m: &mut Image| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Image| { &m.height },
            |m: &mut Image| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Image| { &m.data },
            |m: &mut Image| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Image>(
            "Image",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Image {
    const NAME: &'static str = "Image";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.width = is.read_uint32()?;
                },
                16 => {
                    self.height = is.read_uint32()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.width != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.height);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.width != 0 {
            os.write_uint32(1, self.width)?;
        }
        if self.height != 0 {
            os.write_uint32(2, self.height)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Image {
        Image::new()
    }

    fn clear(&mut self) {
        self.width = 0;
        self.height = 0;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Image {
        static instance: Image = Image {
            width: 0,
            height: 0,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Image {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Image").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Image {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Image {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Texture)
pub struct Texture {
    // message fields
    // @@protoc_insertion_point(field:proto.Texture.id)
    pub id: ::protobuf::MessageField<TextureId>,
    // @@protoc_insertion_point(field:proto.Texture.pos_x)
    pub pos_x: u32,
    // @@protoc_insertion_point(field:proto.Texture.pos_y)
    pub pos_y: u32,
    // @@protoc_insertion_point(field:proto.Texture.image)
    pub image: ::protobuf::MessageField<Image>,
    // @@protoc_insertion_point(field:proto.Texture.texture_filter)
    pub texture_filter: u32,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Texture.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Texture {
    fn default() -> &'a Texture {
        <Texture as ::protobuf::Message>::default_instance()
    }
}

impl Texture {
    pub fn new() -> Texture {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TextureId>(
            "id",
            |m: &Texture| { &m.id },
            |m: &mut Texture| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pos_x",
            |m: &Texture| { &m.pos_x },
            |m: &mut Texture| { &mut m.pos_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pos_y",
            |m: &Texture| { &m.pos_y },
            |m: &mut Texture| { &mut m.pos_y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Image>(
            "image",
            |m: &Texture| { &m.image },
            |m: &mut Texture| { &mut m.image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "texture_filter",
            |m: &Texture| { &m.texture_filter },
            |m: &mut Texture| { &mut m.texture_filter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Texture>(
            "Texture",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Texture {
    const NAME: &'static str = "Texture";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                16 => {
                    self.pos_x = is.read_uint32()?;
                },
                24 => {
                    self.pos_y = is.read_uint32()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.image)?;
                },
                40 => {
                    self.texture_filter = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.pos_x != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.pos_x);
        }
        if self.pos_y != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.pos_y);
        }
        if let Some(v) = self.image.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.texture_filter != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.texture_filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.pos_x != 0 {
            os.write_uint32(2, self.pos_x)?;
        }
        if self.pos_y != 0 {
            os.write_uint32(3, self.pos_y)?;
        }
        if let Some(v) = self.image.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.texture_filter != 0 {
            os.write_uint32(5, self.texture_filter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Texture {
        Texture::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.pos_x = 0;
        self.pos_y = 0;
        self.image.clear();
        self.texture_filter = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Texture {
        static instance: Texture = Texture {
            id: ::protobuf::MessageField::none(),
            pos_x: 0,
            pos_y: 0,
            image: ::protobuf::MessageField::none(),
            texture_filter: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Texture {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Texture").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Texture {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Texture {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Output)
pub struct Output {
    // message fields
    // @@protoc_insertion_point(field:proto.Output.primitives)
    pub primitives: ::std::vec::Vec<ClippedPrimitive>,
    // @@protoc_insertion_point(field:proto.Output.texture_set)
    pub texture_set: ::std::vec::Vec<Texture>,
    // @@protoc_insertion_point(field:proto.Output.texture_free)
    pub texture_free: ::std::vec::Vec<TextureId>,
    // @@protoc_insertion_point(field:proto.Output.repaint_after)
    pub repaint_after: u32,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Output.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Output {
    fn default() -> &'a Output {
        <Output as ::protobuf::Message>::default_instance()
    }
}

impl Output {
    pub fn new() -> Output {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "primitives",
            |m: &Output| { &m.primitives },
            |m: &mut Output| { &mut m.primitives },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "texture_set",
            |m: &Output| { &m.texture_set },
            |m: &mut Output| { &mut m.texture_set },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "texture_free",
            |m: &Output| { &m.texture_free },
            |m: &mut Output| { &mut m.texture_free },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "repaint_after",
            |m: &Output| { &m.repaint_after },
            |m: &mut Output| { &mut m.repaint_after },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Output>(
            "Output",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Output {
    const NAME: &'static str = "Output";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.primitives.push(is.read_message()?);
                },
                18 => {
                    self.texture_set.push(is.read_message()?);
                },
                26 => {
                    self.texture_free.push(is.read_message()?);
                },
                32 => {
                    self.repaint_after = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.primitives {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.texture_set {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.texture_free {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.repaint_after != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.repaint_after);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.primitives {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.texture_set {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.texture_free {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.repaint_after != 0 {
            os.write_uint32(4, self.repaint_after)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Output {
        Output::new()
    }

    fn clear(&mut self) {
        self.primitives.clear();
        self.texture_set.clear();
        self.texture_free.clear();
        self.repaint_after = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Output {
        static instance: Output = Output {
            primitives: ::std::vec::Vec::new(),
            texture_set: ::std::vec::Vec::new(),
            texture_free: ::std::vec::Vec::new(),
            repaint_after: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Output {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Output").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Output {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Output {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0coutput.proto\x12\x05proto\x1a\x0ccommon.proto\"K\n\tTextureId\x12\
    \x10\n\x03tag\x18\x01\x20\x01(\rR\x03tag\x12\x18\n\x07managed\x18\x02\
    \x20\x01(\x04R\x07managed\x12\x12\n\x04user\x18\x03\x20\x01(\x04R\x04use\
    r\"\xb1\x01\n\x04Mesh\x12/\n\ntexture_id\x18\x01\x20\x01(\x0b2\x10.proto\
    .TextureIdR\ttextureId\x12\x18\n\x07indices\x18\x02\x20\x01(\x0cR\x07ind\
    ices\x12\x1f\n\x0bindex_count\x18\x03\x20\x01(\rR\nindexCount\x12\x1a\n\
    \x08vertices\x18\x04\x20\x01(\x0cR\x08vertices\x12!\n\x0cvertex_count\
    \x18\x05\x20\x01(\rR\x0bvertexCount\"o\n\x10ClippedPrimitive\x12(\n\tcli\
    p_rect\x18\x01\x20\x01(\x0b2\x0b.proto.RectR\x08clipRect\x12\x10\n\x03ta\
    g\x18\x02\x20\x01(\rR\x03tag\x12\x1f\n\x04mesh\x18\x03\x20\x01(\x0b2\x0b\
    .proto.MeshR\x04mesh\"I\n\x05Image\x12\x14\n\x05width\x18\x01\x20\x01(\r\
    R\x05width\x12\x16\n\x06height\x18\x02\x20\x01(\rR\x06height\x12\x12\n\
    \x04data\x18\x03\x20\x01(\x0cR\x04data\"\xa0\x01\n\x07Texture\x12\x20\n\
    \x02id\x18\x01\x20\x01(\x0b2\x10.proto.TextureIdR\x02id\x12\x13\n\x05pos\
    _x\x18\x02\x20\x01(\rR\x04posX\x12\x13\n\x05pos_y\x18\x03\x20\x01(\rR\
    \x04posY\x12\"\n\x05image\x18\x04\x20\x01(\x0b2\x0c.proto.ImageR\x05imag\
    e\x12%\n\x0etexture_filter\x18\x05\x20\x01(\rR\rtextureFilter\"\xcc\x01\
    \n\x06Output\x127\n\nprimitives\x18\x01\x20\x03(\x0b2\x17.proto.ClippedP\
    rimitiveR\nprimitives\x12/\n\x0btexture_set\x18\x02\x20\x03(\x0b2\x0e.pr\
    oto.TextureR\ntextureSet\x123\n\x0ctexture_free\x18\x03\x20\x03(\x0b2\
    \x10.proto.TextureIdR\x0btextureFree\x12#\n\rrepaint_after\x18\x04\x20\
    \x01(\rR\x0crepaintAfterJ\xd2\x0b\n\x06\x12\x04\0\0+\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x0e\n\t\n\x02\x03\0\x12\
    \x03\x02\0\x16\n\n\n\x02\x04\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x04\x08\x11\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x11\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x05\t\x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x0f\x10\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x06\x02\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\t\x10\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x06\x13\x14\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x07\x02\x12\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03\x07\t\r\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x07\x10\x11\n\n\n\x02\x04\x01\x12\x04\n\0\x10\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\n\x08\x0c\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x02\x1b\
    \n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0b\x02\x0b\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x0b\x0c\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\
    \x19\x1a\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0c\x02\x14\n\x0c\n\x05\x04\
    \x01\x02\x01\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03\x0c\x08\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0c\x12\x13\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03\r\x02\x19\n\x0c\n\x05\x04\x01\x02\x02\
    \x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\r\t\x14\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\r\x17\x18\n\x0b\n\x04\x04\x01\x02\
    \x03\x12\x03\x0e\x02\x15\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x0e\x02\
    \x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\x03\x03\x12\x03\x0e\x13\x14\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\
    \x0f\x02\x1a\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x0f\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\x04\x01\x12\x03\x0f\t\x15\n\x0c\n\x05\x04\x01\x02\x04\
    \x03\x12\x03\x0f\x18\x19\n\n\n\x02\x04\x02\x12\x04\x12\0\x16\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x12\x08\x18\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x13\x02\x15\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x13\x02\x06\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x13\x07\x10\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x13\x13\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x14\x02\x11\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x14\t\x0c\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x14\x0f\x10\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x15\x02\x10\n\x0c\n\x05\
    \x04\x02\x02\x02\x06\x12\x03\x15\x02\x06\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\x15\x07\x0b\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x15\x0e\x0f\
    \n\n\n\x02\x04\x03\x12\x04\x18\0\x1c\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    \x18\x08\r\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x19\x02\x13\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\
    \x19\t\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x19\x11\x12\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03\x1a\x02\x14\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03\x1a\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1a\t\x0f\n\x0c\
    \n\x05\x04\x03\x02\x01\x03\x12\x03\x1a\x12\x13\n\x0b\n\x04\x04\x03\x02\
    \x02\x12\x03\x1b\x02\x11\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1b\x02\
    \x07\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x1b\x08\x0c\n\x0c\n\x05\x04\
    \x03\x02\x02\x03\x12\x03\x1b\x0f\x10\n\n\n\x02\x04\x04\x12\x04\x1e\0$\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03\x1e\x08\x0f\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03\x1f\x02\x13\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x1f\x02\x0b\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1f\x0c\x0e\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03\x1f\x11\x12\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x20\x02\
    \x13\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\x01\x01\x12\x03\x20\t\x0e\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03\x20\x11\x12\n\x0b\n\x04\x04\x04\x02\x02\x12\x03!\x02\x13\n\x0c\n\
    \x05\x04\x04\x02\x02\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03!\t\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03!\x11\x12\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x03\"\x02\x12\n\x0c\n\x05\x04\x04\x02\x03\
    \x06\x12\x03\"\x02\x07\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03\"\x08\r\n\
    \x0c\n\x05\x04\x04\x02\x03\x03\x12\x03\"\x10\x11\n\x0b\n\x04\x04\x04\x02\
    \x04\x12\x03#\x02\x1c\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x03#\x02\x08\n\
    \x0c\n\x05\x04\x04\x02\x04\x01\x12\x03#\t\x17\n\x0c\n\x05\x04\x04\x02\
    \x04\x03\x12\x03#\x1a\x1b\n\n\n\x02\x04\x05\x12\x04&\0+\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03&\x08\x0e\n\x0b\n\x04\x04\x05\x02\0\x12\x03'\x02+\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03'\x02\n\n\x0c\n\x05\x04\x05\x02\0\
    \x06\x12\x03'\x0b\x1b\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03'\x1c&\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03')*\n\x0b\n\x04\x04\x05\x02\x01\x12\x03(\
    \x02#\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03(\x02\n\n\x0c\n\x05\x04\x05\
    \x02\x01\x06\x12\x03(\x0b\x12\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03(\
    \x13\x1e\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03(!\"\n\x0b\n\x04\x04\x05\
    \x02\x02\x12\x03)\x02&\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03)\x02\n\n\
    \x0c\n\x05\x04\x05\x02\x02\x06\x12\x03)\x0b\x14\n\x0c\n\x05\x04\x05\x02\
    \x02\x01\x12\x03)\x15!\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03)$%\n\x0b\
    \n\x04\x04\x05\x02\x03\x12\x03*\x02\x1b\n\x0c\n\x05\x04\x05\x02\x03\x05\
    \x12\x03*\x02\x08\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03*\t\x16\n\x0c\n\
    \x05\x04\x05\x02\x03\x03\x12\x03*\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(TextureId::generated_message_descriptor_data());
            messages.push(Mesh::generated_message_descriptor_data());
            messages.push(ClippedPrimitive::generated_message_descriptor_data());
            messages.push(Image::generated_message_descriptor_data());
            messages.push(Texture::generated_message_descriptor_data());
            messages.push(Output::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
